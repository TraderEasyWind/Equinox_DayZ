modded class ActionFillBottleBaseWetCB extends ActionContinuousBaseCB
{
    private int m_liquid_type;
    private int m_liquid_typeN;
    private float m_LiquidForm;

    override void CreateActionComponent()
    {
        string worldname;
        GetGame().GetWorldName(worldname);
        worldname.ToLower(); //to be safe 
        if ( worldname != "namalsk" )
        {
            m_liquid_typeN = ActionFillBottleBase.Cast( m_ActionData.m_Action ).GetLiquidTypeN( m_ActionData.m_Player, m_ActionData.m_Target, m_ActionData.m_MainItem );
            
            m_ActionData.m_ActionComponent = new CAContinuousFillWet(UAQuantityConsumed.FILL_LIQUID, m_liquid_typeN, m_LiquidForm);
        }
        m_liquid_type = ActionFillBottleBase.Cast( m_ActionData.m_Action ).GetLiquidType( m_ActionData.m_Player, m_ActionData.m_Target, m_ActionData.m_MainItem );
        
        m_LiquidForm = ActionFillBottleBase.Cast(m_ActionData.m_Action).GetTargetWetness();
        
        m_ActionData.m_ActionComponent = new CAContinuousFillWet(UAQuantityConsumed.FILL_LIQUID, m_liquid_type, m_LiquidForm);

        if( m_ActionData.m_Target.GetObject() && m_ActionData.m_Target.GetObject().IsFuelStation())
        {
            m_ActionData.m_ActionComponent = new CAContinuousFill(UAQuantityConsumed.FUEL, m_liquid_typeN);
        }
    }
};

modded class ActionFillBottleBase
{
    protected float m_TargetWet = 2.0;

    void ActionFillBottleBase()
    {
        m_CallbackClass = ActionFillBottleBaseWetCB;
    }
    
    int GetLiquidType( PlayerBase player, ActionTarget target, ItemBase item )
    {
        vector pos_cursor = target.GetCursorHitPos();        
        CCTWaterSurface waterCheck = new CCTWaterSurface(UAMaxDistances.DEFAULT, UAWaterType.FRESH);
        
        if ( ( waterCheck.Can(player, target) || (target.GetObject() && target.GetObject().IsWell()) ) && Liquid.CanFillContainer(item, LIQUID_WATER ) )
        {
            return LIQUID_WATER;
        }
        else if ( target.GetObject() && target.GetObject().IsFuelStation() && Liquid.CanFillContainer(item, LIQUID_GASOLINE ) )
        {
            return LIQUID_GASOLINE;
        }
        
        return -1;
    }
    int GetLiquidTypeN( PlayerBase player, ActionTarget target, ItemBase item )
    {
        // liquid sources on objects
        if (target.GetObject() && (target.GetObject().IsWell()))
        {
            // wells do not have ice nor freezing water
            m_TargetWet = 0.0;
            return LIQUID_WATER;
        } 
        if (target.GetObject() && target.GetObject().IsFuelStation())
        {
            // gas is also just fine (freezing point different than water (-40C), lets not complicate things more)
            m_TargetWet = 0.0;
            return LIQUID_GASOLINE;
        }

        // liquid sources on surface
        vector pos_cursor = target.GetCursorHitPos();
        string surface_type = "";
        GetGame().SurfaceGetType(pos_cursor[0], pos_cursor[2], surface_type);
        switch (surface_type) 
        {
            case "nam_seaice":
            case "nam_lakeice_ext":
            case "nam_snow":
            {
                m_TargetWet = 3.0;
                return LIQUID_WATER;
                break;
            }
            case "nam_lakewater_ext":
            {
                m_TargetWet = 2.0;
                return LIQUID_WATER;
                break;
            }
            default:
            {
                return -1;
            }
        }
        return -1;
    }
    
    
    float GetTargetWetness()
    {
        return m_TargetWet;
    }
};